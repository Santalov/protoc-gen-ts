/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.0
 * source: type.proto
 * target: web
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as web_1 from "grpc-web";
export class City extends pb_1.Message {
    constructor(data?: any[] | {
        code?: string;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get code() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: string;
        name?: string;
    }) {
        const message = new City({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            name?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.code === "string" && this.code.length)
            writer.writeString(1, this.code);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(2, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): City {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new City();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): City {
        return City.deserialize(bytes);
    }
}
export class Temperature extends pb_1.Message {
    constructor(data?: any[] | {
        code?: string;
        current?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("current" in data && data.current != undefined) {
                this.current = data.current;
            }
        }
    }
    get code() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get current() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set current(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: string;
        current?: number;
    }) {
        const message = new Temperature({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.current != null) {
            message.current = data.current;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            current?: number;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.current != null) {
            data.current = this.current;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.code === "string" && this.code.length)
            writer.writeString(1, this.code);
        if (this.current !== undefined)
            writer.writeInt32(2, this.current);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Temperature {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Temperature();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.current = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Temperature {
        return Temperature.deserialize(bytes);
    }
}
export class CityQuery extends pb_1.Message {
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}) {
        const message = new CityQuery({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CityQuery {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CityQuery();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CityQuery {
        return CityQuery.deserialize(bytes);
    }
}
export namespace CityQuery {
    export class Result extends pb_1.Message {
        constructor(data?: any[] | {
            cities?: City[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cities" in data && data.cities != undefined) {
                    this.cities = data.cities;
                }
            }
        }
        get cities() {
            return pb_1.Message.getRepeatedWrapperField(this, City, 2) as City[];
        }
        set cities(value: City[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            cities?: ReturnType<typeof City.prototype.toObject>[];
        }) {
            const message = new Result({});
            if (data.cities != null) {
                message.cities = data.cities.map(item => City.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                cities?: ReturnType<typeof City.prototype.toObject>[];
            } = {};
            if (this.cities != null) {
                data.cities = this.cities.map((item: City) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cities !== undefined)
                writer.writeRepeatedMessage(2, this.cities, (item: City) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.cities, () => pb_1.Message.addToRepeatedWrapperField(message, 2, City.deserialize(reader), City));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Result {
            return Result.deserialize(bytes);
        }
    }
}
export class GetTemperature extends pb_1.Message {
    constructor(data?: any[] | {
        code?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
        }
    }
    get code() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        code?: string;
    }) {
        const message = new GetTemperature({});
        if (data.code != null) {
            message.code = data.code;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.code === "string" && this.code.length)
            writer.writeString(1, this.code);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTemperature {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTemperature();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetTemperature {
        return GetTemperature.deserialize(bytes);
    }
}
export class Ping extends pb_1.Message {
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}) {
        const message = new Ping({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ping {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ping();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Ping {
        return Ping.deserialize(bytes);
    }
}
export namespace Ping {
    export class Ack extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new Ack({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ack {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ack {
            return Ack.deserialize(bytes);
        }
    }
}
export class Forecast extends pb_1.Message {
    constructor(data?: any[] | {
        code?: string;
        date?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
        }
    }
    get code() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: string;
        date?: string;
    }) {
        const message = new Forecast({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.date != null) {
            message.date = data.date;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            date?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.date != null) {
            data.date = this.date;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.code === "string" && this.code.length)
            writer.writeString(1, this.code);
        if (typeof this.date === "string" && this.date.length)
            writer.writeString(2, this.date);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Forecast {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Forecast();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.date = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Forecast {
        return Forecast.deserialize(bytes);
    }
}
export namespace Forecast {
    export class Result extends pb_1.Message {
        constructor(data?: any[] | {
            temperature?: Temperature;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
            }
        }
        get temperature() {
            return pb_1.Message.getWrapperField(this, Temperature, 1) as Temperature;
        }
        set temperature(value: Temperature) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            temperature?: ReturnType<typeof Temperature.prototype.toObject>;
        }) {
            const message = new Result({});
            if (data.temperature != null) {
                message.temperature = Temperature.fromObject(data.temperature);
            }
            return message;
        }
        toObject() {
            const data: {
                temperature?: ReturnType<typeof Temperature.prototype.toObject>;
            } = {};
            if (this.temperature != null) {
                data.temperature = this.temperature.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.temperature !== undefined)
                writer.writeMessage(1, this.temperature, () => this.temperature.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.temperature, () => message.temperature = Temperature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Result {
            return Result.deserialize(bytes);
        }
    }
}
export abstract class UnimplementedWeatherService {
    static definition = {
        cities: {
            path: "/Weather/cities",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CityQuery) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CityQuery.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CityQuery.Result) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CityQuery.Result.deserialize(new Uint8Array(bytes))
        },
        get: {
            path: "/Weather/get",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: GetTemperature) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetTemperature.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Temperature) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Temperature.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract cities(call: grpc_1.ServerUnaryCall<CityQuery, CityQuery.Result>, callback: grpc_1.sendUnaryData<CityQuery.Result>): void;
    abstract get(call: grpc_1.ServerWritableStream<GetTemperature, Temperature>): void;
}
export class WeatherClient {
    constructor(address: string, credentials: web_1.ChannelCredentials, options?: Partial<web_1.ChannelOptions>) {
        super(address, credentials, options)
    }
    cities: GrpcUnaryServiceInterface<CityQuery, CityQuery.Result> = (message: CityQuery, metadata: web_1.Metadata | web_1.CallOptions | web_1.requestCallback<CityQuery.Result>, options?: web_1.CallOptions | web_1.requestCallback<CityQuery.Result>, callback?: web_1.requestCallback<CityQuery.Result>): web_1.ClientUnaryCall => {
        return super.cities(message, metadata, options, callback);
    };
    get: GrpcStreamServiceInterface<GetTemperature, GetTemperature> = (message: GetTemperature, metadata?: web_1.Metadata | web_1.CallOptions, options?: web_1.CallOptions): web_1.ClientReadableStream<GetTemperature> => {
        return super.get(message, metadata, options);
    };
}
