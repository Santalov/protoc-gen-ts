"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleClient = exports.UnimplementedExampleService = exports.Response = exports.Request = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.0
 * source: type.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
class Request extends pb_1.Message {
    constructor(data) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("a" in data && data.a != undefined) {
                this.a = data.a;
            }
            if ("b" in data && data.b != undefined) {
                this.b = data.b;
            }
        }
    }
    get a() {
        return pb_1.Message.getField(this, 1);
    }
    set a(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get b() {
        return pb_1.Message.getField(this, 2);
    }
    set b(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new Request({});
        if (data.a != null) {
            message.a = data.a;
        }
        if (data.b != null) {
            message.b = data.b;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.a != null) {
            data.a = this.a;
        }
        if (this.b != null) {
            data.b = this.b;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.a !== undefined)
            writer.writeInt32(1, this.a);
        if (this.b !== undefined)
            writer.writeInt32(2, this.b);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.a = reader.readInt32();
                    break;
                case 2:
                    message.b = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Request.deserialize(bytes);
    }
}
exports.Request = Request;
class Response extends pb_1.Message {
    constructor(data) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
        }
    }
    get result() {
        return pb_1.Message.getField(this, 1);
    }
    set result(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new Response({});
        if (data.result != null) {
            message.result = data.result;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.result != null) {
            data.result = this.result;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.result !== undefined)
            writer.writeInt32(1, this.result);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.result = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Response.deserialize(bytes);
    }
}
exports.Response = Response;
class UnimplementedExampleService {
}
exports.UnimplementedExampleService = UnimplementedExampleService;
UnimplementedExampleService.definition = {
    add: {
        path: "/Example/add",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => Request.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => Response.deserialize(new Uint8Array(bytes))
    }
};
class ExampleClient extends grpc_1.makeGenericClientConstructor(UnimplementedExampleService.definition, "Example", {}) {
    constructor(address, credentials, options) {
        super(address, credentials, options);
        this.add = (message, metadata, options, callback) => {
            return super.add(message, metadata, options, callback);
        };
    }
}
exports.ExampleClient = ExampleClient;
